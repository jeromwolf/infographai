version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: infographai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: infograph
      POSTGRES_PASSWORD: ${DB_PASSWORD:-infograph123}
      POSTGRES_DB: infographai
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - infographai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U infograph"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: infographai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - infographai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-runner
    container_name: infographai-api
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://infograph:${DB_PASSWORD:-infograph123}@postgres:5432/infographai
      REDIS_URL: redis://redis:6379
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infographai-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-runner
    container_name: infographai-web
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://api:4000
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - infographai-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: infographai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - infographai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-runner
    container_name: infographai-worker
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      WORKER_MODE: true
      DATABASE_URL: postgresql://infograph:${DB_PASSWORD:-infograph123}@postgres:5432/infographai
      REDIS_URL: redis://redis:6379
    command: ["node", "apps/api/dist/worker.js"]
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infographai-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: infographai-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - infographai-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: infographai-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - infographai-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: infographai-backup
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-infograph123}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
        PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h postgres -U infograph -d infographai > /backup/infographai_$$(date +%Y%m%d_%H%M%S).sql
        find /backup -name '*.sql' -mtime +7 -delete
        sleep 86400
      done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infographai-network

networks:
  infographai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: